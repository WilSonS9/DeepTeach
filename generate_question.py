import openai
import argparse

# Construct an argument parser
all_args = argparse.ArgumentParser()

# Add arguments to the parser
all_args.add_argument("-q", "--question", required=False,
   help="The full question that the model will solve. If this argument is not provided, the question will be generated by an AI. Should this and the --prompt argument be provided, this will overrule the prompt.")
all_args.add_argument("-p", "--prompt", required=False,
   help="The prompt that will be used to generate the question. The prompt will be used as the beginning of the question, and the rest will be generated by the AI. If this argument is not provided, the entire question will be AI-generated.")
all_args.add_argument("-g", "--generating_temperature", required=False,
   help="The temperature used to generate the question.")
all_args.add_argument("-a", "--answering_temperature", required=False,
   help="The temperature used to generate the answer.")
args = vars(all_args.parse_args())

openai.api_key_path = './API_KEY.txt'

def generateQuestion(question_prompt):
    res = openai.Completion.create(
        model='ada:ft-abb-gymnasiet:deepteach-test-v2-2022-05-19-11-47-11',
        # model='curie:ft-abb-gymnasiet:deepteach-test-v3-2022-05-20-08-55-07',
        prompt='This is a mathematics question:\n' + question_prompt,
        max_tokens=250,
        temperature=t1,
        stop='?')
    question = question_prompt + res['choices'][0]['text'] + '? Explain all steps of your solution.\n\nLet\'s think step by step.'
    return question

print()

question_prompt = args['prompt']
if question_prompt is None:
    question_prompt = ''

input_question = args['question']
if input_question is None:
    input_question = ''

t1 = args['generating_temperature']
if t1 is None:
    t1 = 0.7
t1 = float(t1)

t2 = args['answering_temperature']
if t2 is None:
    t2 = 0.7
t2 = float(t2)

if len(input_question) > 0:
    question = input_question + '\n\nLet\'s think step by step.'
else:
    question = generateQuestion(question_prompt)
print(question)

res = openai.Completion.create(
    model='text-davinci-002',
    prompt=question,
    max_tokens=1000,
    temperature=t2)
# print(res)

solution = res['choices'][0]['text']
print(solution)

output = {'question': question, 'solution': solution}

# print()
# print()

# print(output)